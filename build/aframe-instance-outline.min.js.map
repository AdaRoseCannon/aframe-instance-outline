{"version":3,"file":"aframe-instance-outline.min.js","sources":["../src/InstancedSkinnedMesh.js","../src/aframe-instance-outline.js"],"sourcesContent":["/* jshint esversion: 9, -W097 */\n/* For dealing with spline curves */\n/* global THREE, AFRAME, setTimeout, console */\n'use strict';\nimport { InstancedBufferAttribute, SkinnedMesh , Matrix4 } from 'three';\n\nconst _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\nconst _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _instanceIntersects = [];\n\nclass InstancedSkinnedMesh extends SkinnedMesh {\n\n\tconstructor( geometry, material, count ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );\n\t\tthis.instanceColor = null;\n\n\t\tthis.count = count;\n\n\t\tthis.frustumCulled = false;\n\n\t\tthis._mesh = null;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tif ( source.isInstancedMesh ) {\n\n\t\t\tthis.instanceMatrix.copy( source.instanceMatrix );\n\n\t\t\tif ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();\n\n\t\t\tthis.count = source.count;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetColorAt( index, color ) {\n\n\t\tcolor.fromArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tgetMatrixAt( index, matrix ) {\n\n\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst raycastTimes = this.count;\n\n\t\tif ( this._mesh === null ) {\n\n\t\t\tthis._mesh = new SkinnedMesh( this.geometry, this.material );\n\t\t\tthis._mesh.copy( this );\n\n\t\t}\n\n\t\tconst _mesh = this._mesh;\n\n\t\tif ( _mesh.material === undefined ) return;\n\n\t\tfor ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t// calculate the world matrix for each instance\n\n\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t// the mesh represents this single instance\n\n\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t// process the result of raycast\n\n\t\t\tfor ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n\n\t\t\t\tconst intersect = _instanceIntersects[ i ];\n\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_instanceIntersects.length = 0;\n\n\t\t}\n\n\t}\n\n\tsetColorAt( index, color ) {\n\n\t\tif ( this.instanceColor === null ) {\n\n\t\t\tthis.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ), 3 );\n\n\t\t}\n\n\t\tcolor.toArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tsetMatrixAt( index, matrix ) {\n\n\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nInstancedSkinnedMesh.prototype.isInstancedMesh = true;\n\nexport { InstancedSkinnedMesh };\n","/* jshint esversion: 9, -W097 */\n/* For dealing with spline curves */\n/* global THREE, AFRAME, setTimeout, console */\n'use strict';\n\nimport { InstancedSkinnedMesh } from './InstancedSkinnedMesh.js';\n\nfunction onBeforeCompile( shader ) {\n    // const material = this;\n\tconsole.log(shader);\n\n\tshader.vertexShader = shader.vertexShader.replace('void main() {', `\n\tflat varying int instanceID;\n\t#ifdef USE_ENVMAP\n\t\t#ifndef ENV_WORLDPOS\n\t\t\tvarying vec3 vWorldPosition;\n\t\t#endif\n\t#else\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\tvoid main() {\n\t`);\n\n\tshader.vertexShader = shader.vertexShader\n\t.replace('#include <project_vertex>',`\n\tvec4 mvPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tmvPosition = instanceMatrix * mvPosition;\n\t#endif\n\tmvPosition = modelViewMatrix * mvPosition;\n\tmvPosition += vec4(vNormal * 0.015 * (1.0 - float(gl_InstanceID)), .0);\n\tgl_Position = projectionMatrix * mvPosition;\n    instanceID = gl_InstanceID;\n\t`);\n\n\tshader.fragmentShader = shader.fragmentShader.replace('void main() {', `\n\tflat varying int instanceID;\n\tuniform mat4 modelViewMatrix;\n\t#ifdef USE_ENVMAP\n\t\t#ifndef ENV_WORLDPOS\n\t\t\tvarying vec3 vWorldPosition;\n\t\t#endif\n\t#else\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifndef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n\t#endif\n\tvoid main() {\n\t`);\n\tshader.fragmentShader = shader.fragmentShader.replace('}', `\n\tvec4 posInView = modelViewMatrix * vec4(vWorldPosition, 1.0);\n\tposInView /= posInView[3];\n\tvec3 VinView = normalize(-posInView.xyz);\n\tgl_FragColor.rgb = vec3(1.,1.,1.);\n\tgl_FragColor.a = float(instanceID);\n}`);\n}\n\nconst tempMatrix = new THREE.Matrix4().makeScale(1,1,1);\nexport function makeOutline(object) {\n\tconst after = [];\n\tobject.traverse(o => {\n\t\tif (\n\t\t\t(o instanceof THREE.Mesh) &&\n\t\t\t!(o instanceof THREE.InstancedMesh || o instanceof InstancedSkinnedMesh)\n\t\t) {\n\t\t\tconst newMesh = o instanceof THREE.SkinnedMesh ?\n\t\t\t\tnew InstancedSkinnedMesh(o.geometry, o.material, 2):\n\t\t\t\tnew THREE.InstancedMesh(o.geometry, o.material, 2);\n\n\t\t\to.material.onBeforeCompile = onBeforeCompile;\n\t\t\to.material.transparent = true;\n\t\t\to.material.side = THREE.DoubleSide;\n\n\t\t\to.updateMatrixWorld();\n\t\t\tnewMesh.setMatrixAt(0, tempMatrix);\n\t\t\tnewMesh.setMatrixAt(1, tempMatrix);\n\n\t\t\tconst array = o.parent.children;\n\t\t\tconst index = array.indexOf(o);\n\n\t\t\tnewMesh.children = o.children;\n\t\t\tnewMesh.parent = o.parent;\n\n\t\t\tafter.push(() => array[index] = newMesh);\n\t\t}\n\t});\n\tfor (const fn of after) fn();\n}\n\nAFRAME.registerComponent('outline', {\n\tschema: {},\n\tinit() {\n\t\tthis.onLoad = () => makeOutline(this.el.object3D);\n\t\tthis.el.addEventListener('object3dset', this.onLoad);\n\t\tthis.onLoad();\n\t}\n});\n"],"names":["_instanceLocalMatrix","Matrix4","_instanceWorldMatrix","_instanceIntersects","InstancedSkinnedMesh","SkinnedMesh","constructor","geometry","material","count","super","this","instanceMatrix","InstancedBufferAttribute","Float32Array","instanceColor","frustumCulled","_mesh","copy","source","isInstancedMesh","clone","getColorAt","index","color","fromArray","array","getMatrixAt","matrix","raycast","raycaster","intersects","matrixWorld","raycastTimes","undefined","instanceId","multiplyMatrices","i","l","length","intersect","object","push","setColorAt","toArray","setMatrixAt","updateMorphTargets","dispose","dispatchEvent","type","onBeforeCompile","shader","vertexShader","replace","fragmentShader","prototype","tempMatrix","THREE","makeScale","makeOutline","after","traverse","o","Mesh","InstancedMesh","newMesh","transparent","side","DoubleSide","updateMatrixWorld","parent","children","indexOf","fn","AFRAME","registerComponent","schema","init","onLoad","el","object3D","addEventListener"],"mappings":"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"}