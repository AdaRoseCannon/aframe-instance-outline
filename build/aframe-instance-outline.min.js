var AFRAME_OUTLINE=function(t,e){"use strict";const n=new e.Matrix4,i=new e.Matrix4,r=[];class a extends e.SkinnedMesh{constructor(t,n,i){super(t,n),this.instanceMatrix=new e.InstancedBufferAttribute(new Float32Array(16*i),16),this.instanceColor=null,this.count=i,this.frustumCulled=!1,this._mesh=null}copy(t){return super.copy(t),t.isInstancedMesh&&(this.instanceMatrix.copy(t.instanceMatrix),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count),this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t)}raycast(t,a){const o=this.matrixWorld,s=this.count;null===this._mesh&&(this._mesh=new e.SkinnedMesh(this.geometry,this.material),this._mesh.copy(this));const c=this._mesh;if(void 0!==c.material)for(let e=0;e<s;e++){this.getMatrixAt(e,n),i.multiplyMatrices(o,n),c.matrixWorld=i,c.raycast(t,r);for(let t=0,n=r.length;t<n;t++){const n=r[t];n.instanceId=e,n.object=this,a.push(n)}r.length=0}}setColorAt(t,n){null===this.instanceColor&&(this.instanceColor=new e.InstancedBufferAttribute(new Float32Array(3*this.instanceMatrix.count),3)),n.toArray(this.instanceColor.array,3*t)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}function o(t){t.vertexShader=t.vertexShader.replace("void main() {","\n\t#include <normal_pars_vertex>\n\tflat varying float instanceID;\n\t#ifdef FLAT_SHADED\n\t\tvarying vec3 vNormal;\n\t#endif\n\tvoid main() {\n\t"),t.vertexShader=t.vertexShader.replace("#include <project_vertex>","\n\tinstanceID = float(gl_InstanceID);\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#ifdef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\tvec4 mvPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tmvPosition = instanceMatrix * mvPosition;\n\t#endif\n\tmvPosition = modelViewMatrix * mvPosition;\n\tmvPosition += vec4(vNormal * 0.015 * instanceID, .0);\n\tgl_Position = projectionMatrix * mvPosition;\n\t"),t.fragmentShader=t.fragmentShader.replace("void main() {","\n\tflat varying float instanceID;\n\tvoid main() {\n\t\tif (instanceID == 1. && gl_FrontFacing) discard;\n\t"),t.fragmentShader=t.fragmentShader.replace("vec4 diffuseColor = vec4( diffuse, opacity );","\n\t\tvec4 diffuseColor = vec4(mix(vec3(0.), vec3(1.), instanceID), opacity);\n\t")}a.prototype.isInstancedMesh=!0;const s=(new THREE.Matrix4).makeScale(1,1,1);function c(t){const e=[];t.traverse((t=>{if(t instanceof THREE.Mesh&&!(t instanceof THREE.InstancedMesh||t instanceof a)){const n=new THREE.MeshBasicMaterial({color:t.material.color,onBeforeCompile:o,side:THREE.DoubleSide,transparent:!1,blending:THREE.AdditiveBlending}),i=t instanceof THREE.SkinnedMesh?new a(t.geometry,n,2):new THREE.InstancedMesh(t.geometry,n,2);t.updateMatrixWorld(),i.setMatrixAt(0,s),i.setMatrixAt(1,s);const r=t.parent.children,c=r.indexOf(t);i.children=t.children,i.parent=t.parent,e.push((()=>r[c]=i))}}));for(const t of e)t()}return AFRAME.registerComponent("outline",{schema:{},init(){this.onLoad=()=>c(this.el.object3D),this.el.addEventListener("object3dset",this.onLoad),this.onLoad()}}),t.makeOutline=c,t.onBeforeCompile=o,Object.defineProperty(t,"__esModule",{value:!0}),t}({},THREE);
//# sourceMappingURL=aframe-instance-outline.min.js.map
